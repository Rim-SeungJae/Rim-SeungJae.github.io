[
  
  {
    "title": "해양 침적 쓰레기 이미지를 활용한 인공지능 프로젝트",
    "url": "/posts/%ED%95%B4%EC%96%91-%EC%B9%A8%EC%A0%81-%EC%93%B0%EB%A0%88%EA%B8%B0-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/",
    "categories": "프로젝트, 인공지능",
    "tags": "프로젝트, 인공지능, AI, 이미지분류",
    "date": "2024-01-11 16:00:00 +0900",
    





    
    "snippet": "개요본 프로젝트에는 AI-Hub의 해양 침적 쓰레기 이미지 데이터셋이 사용되었다. 해당 데이터셋은 해양 침적 쓰레기의 수거를 위해 실시, 설계 조사를 보다 빠르고 효율적으로 수행하고자 조사 과정에서 생성되는 소나 조사 이미지와 수중 촬영 이미지를 통해 침적 쓰레기를 자동 인식하고 분류할 수 있도록 인공지능을 훈련하기 위한 데이터셋이다.우리는 해당 데이...",
    "content": "개요본 프로젝트에는 AI-Hub의 해양 침적 쓰레기 이미지 데이터셋이 사용되었다. 해당 데이터셋은 해양 침적 쓰레기의 수거를 위해 실시, 설계 조사를 보다 빠르고 효율적으로 수행하고자 조사 과정에서 생성되는 소나 조사 이미지와 수중 촬영 이미지를 통해 침적 쓰레기를 자동 인식하고 분류할 수 있도록 인공지능을 훈련하기 위한 데이터셋이다.우리는 해당 데이터셋의 선행 프로젝트에서 인공지능 모델로 YOLO를 선택했음에 주목했다. YOLO는 특정 이미지에서 여러가지 대상들이 각각 어떤 사물인지, 그리고 이미지 내에서 어느 위치에 있는지 탐지해내는 multi-label object detection 측면에서 강력하기로 유명한 모델이다.그러나 해당 데이터셋의 이미지들을 분석해보면 한 이미지 내에 여러가지 쓰레기들이 혼재하는 경우는 매우 드물다는 점을 알 수 있다. 그러므로 YOLO 정도로 complex한 모델이 오히려 불필요할 수도 있다는 가능성을 도출하였다. 따라서 이번 프로젝트에서는 YOLO보다 가벼운 cnn 관련 모델들을 여러개 구현하여 각각의 성능을 비교해보고자 한다.                              해양 쓰레기 ‘밧줄’이 포함된 데이터 샘플      사용한 모델들본 프로젝트에서 해양 침적 쓰레기 이미지 분류를 위해 구현된 모델은 총 4가지이다.1) VGGNetVGGNet은 심층 신경망의 시작점이라고도 많이 불리는 모델이다. VGGNet이 등장하기 이전, ImageNet Large Scale Visual Recognition Challenge에서 우수한 성적을 거두었던 모델들은 최대 8개 층을 이용했다.다른 수많은 모델들이 VGGNet의 영향을 받았다는 점을 고려하면 본 프로젝트에서 VGGNet을 기용하는 것은 충분히 의미가 있다.                              VGGNet의 구조      2) ResNetResNet은 “Deep Residual Learning for Image”에서 처음 소개된 모델이다. ResNet의 가장 큰 특징은 3x3 크기의 컨볼루션 레이어만 사용하여 이미지의 특성을 추출한다는 점이다. 우리 프로젝트에서는 ResNet의 가장 기본적인 형태인 ResNet-18을 사용한다.                              ResNet-18의 구조      3) DenseNetDenseNet은 2017년에 등장했다. DenseNet은 ResNet을 이기기 위해 개발된 것으로 둘 간에는 몇 가지 차이가 존재한다. ‘Densely Connected Convolutional Networks’ 논문에 따르면 DenseNet은 기울기 소실 문제를 해결하고 강한 기울기 흐름과 정보 흐름을 가진 특성 재사용 능력이 있다고 한다.                              DenseNet의 구조      4) DarkNetDarkNet은 YOLO 버전 2와 3의 백본 모델이다. 그 구조는 GoogleNet과 매우 유사하지만 1x1 컨볼루션 레이어를 사용한다. ImageNet에서의 결과를 참고하면 DarkNet은 레이어 수에 비해 매우 높은 정확도를 기록한다.DarkNet을 프로젝트에 사용하는 또 다른 이유는 이것이 YOLO 모델들의 백본이기 때문이다. 앞서 언급한거처럼 YOLO 전체를 해양 침적 쓰레기 데이터셋에 적용하는것은 비효율적인 것처럼 보이지만 YOLO의 백본인 DarkNet만을 활용한다면 더 좋은 결과를 얻을지도 모른다.                              DarkNet-19의 구조      결과            모델      정확도                  ResNet      55%              DarkNet      21%              VGGNet      50%              DenseNet      43%      DenseNet은 모델 복잡성이 높은 편인데도 VGGNet 및 ResNet보다 정확도가 낮다. 특히, 모델 복잡성이 가장 높은 DarkNet은 정확도가 21%로 급격하게 감소한다. 이는 과제에 대한 우리의 해석이 어느 정도 옳았음을 증명한다. 처음에 우리는 YOLO와 같은 고수준의 object detection 모델이 필요하지 않을 것으로 생각했다. 따라서 우리는 이 과제를 4개의 모델을 사용한 multi-label 분류 문제로 접근했다. 결론적으로 DenseNet과 DarkNet의 complexity가 이 작업을 수행하기에 너무 높아서 훈련 데이터에서 과적합이 발생하면서 정확도가 낮아졌다고 볼 수 있는 것이다.그러나 아쉬운점은 우리 모델 중 가장 높은 정확도는 55%에 불과하다는 점이다. 개발 환경에서의 컴퓨팅 파워 제한으로 인한 불가피한 이미지 크기의 조정, 그리고 학습 데이터셋 크기가 크지 않다는 사실이 영향을 미쳤을 것이라고 추측한다.프로젝트 링크| :link:  프로젝트 깃허브 링크  |프로젝트 참여자| :link:  Rim-SeungJae  || :link:  DongwonKim  |"
  },
  
  {
    "title": "14725 개미굴",
    "url": "/posts/14725-%EA%B0%9C%EB%AF%B8%EA%B5%B4/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, 트라이",
    "date": "2024-01-11 15:25:00 +0900",
    





    
    "snippet": "14725 개미굴 해법            :link:  문제 링크      트라이라고 하는 독특한 트리 형태의 자료구조를 활용하는 문제. 단, 맛보기 정도의 난이도이기에 map을 활용하여 트리를 구현한다는 정도만 이해한다면 쉽게 풀 수 있다.#include&lt;map&gt;#include&lt;set&gt;#include&lt;vector&gt;#...",
    "content": "14725 개미굴 해법            :link:  문제 링크      트라이라고 하는 독특한 트리 형태의 자료구조를 활용하는 문제. 단, 맛보기 정도의 난이도이기에 map을 활용하여 트리를 구현한다는 정도만 이해한다면 쉽게 풀 수 있다.#include&lt;map&gt;#include&lt;set&gt;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;class node{    public:        map&lt;string,node*&gt; children;        void insert(vector&lt;string&gt; v,int idx)        {            if(idx == v.size()) return;            if(children.find(v[idx])==children.end())            {                children[v[idx]] = new node;            }            children[v[idx]] -&gt; insert(v,idx+1);        }        void dfs(int depth)        {            for(auto iter=children.begin();iter!=children.end();iter++)            {                for(int i=0;i&lt;depth;i++) cout &lt;&lt; \"--\";                cout &lt;&lt; (*iter).first &lt;&lt; '\\n';                (iter-&gt;second)-&gt;dfs(depth+1);            }        }};int main(){    ios::sync_with_stdio(false);    cin.tie(NULL);    node trie;    int n;    cin &gt;&gt; n;    for(int i=0;i&lt;n;i++)    {        int k;        cin &gt;&gt; k;        vector&lt;string&gt; v;        for(int j=0;j&lt;k;j++)        {            string str;            cin &gt;&gt; str;            v.push_back(str);        }        trie.insert(v,0);    }    trie.dfs(0);}"
  },
  
  {
    "title": "2042 구간 합 구하기",
    "url": "/posts/2042-%EA%B5%AC%EA%B0%84-%ED%95%A9-%EA%B5%AC%ED%95%98%EA%B8%B0/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, 세그먼트 트리",
    "date": "2024-01-10 14:05:00 +0900",
    





    
    "snippet": "2042 구간 합 구하기 해법            :link:  문제 링크      세그먼트 트리를 이용하는 문제. 이전에 다루었던 1019 책 페이지 문제보다 조금 더 심화되어 세그먼트 트리의 모든 기능을 다룰 줄 알아야 해결할 수 있는 문제이다.#include&lt;cstdio&gt;using namespace std;long long seg[40...",
    "content": "2042 구간 합 구하기 해법            :link:  문제 링크      세그먼트 트리를 이용하는 문제. 이전에 다루었던 1019 책 페이지 문제보다 조금 더 심화되어 세그먼트 트리의 모든 기능을 다룰 줄 알아야 해결할 수 있는 문제이다.#include&lt;cstdio&gt;using namespace std;long long seg[4000010];long long tmp[1000010];long long init(int start,int end,int idx){    if(start == end)    {        seg[idx] = tmp[start];        return seg[idx];    }    int mid = (start+end)/2;    return seg[idx] = init(start,mid,idx*2) + init(mid+1,end,idx*2+1);}void change(int start,int end,int idx,int target,long long diff){    if(start&gt;target || end&lt;target) return;    seg[idx] += diff;    if(start==end) return;    int mid = (start+end)/2;    change(start,mid,idx*2,target,diff);    change(mid+1,end,idx*2+1,target,diff);}long long sum(int start,int end,int idx,int l,int r){    if(start&gt;r || end&lt;l) return 0;    if(l&lt;=start &amp;&amp; end&lt;=r) return seg[idx];    else{        int mid = (start+end)/2;        return sum(start,mid,idx*2,l,r) + sum(mid+1,end,idx*2+1,l,r);    }}int main(){    int n,m,k;    scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k);    for(int i=0;i&lt;n;i++)    {        scanf(\"%lld\",&amp;tmp[i]);    }    init(0,n-1,1);    for(int i=0;i&lt;m+k;i++)    {        long long a,b,c;        scanf(\"%lld %lld %lld\",&amp;a,&amp;b,&amp;c);        if(a==1)        {            change(0,n-1,1,b-1,c-tmp[b-1]);            tmp[b-1] = c;        }        else{            printf(\"%lld\\n\",sum(0,n-1,1,b-1,c-1));        }    }}"
  },
  
  {
    "title": "2357 최댓값과 최솟값",
    "url": "/posts/2357-%EC%B5%9C%EB%8C%93%EA%B0%92%EA%B3%BC-%EC%B5%9C%EC%86%9F%EA%B0%92/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, 세그먼트 트리",
    "date": "2024-01-03 15:28:00 +0900",
    





    
    "snippet": "2357 최댓값과 최솟값 해법            :link:  문제 링크      세그먼트 트리라는 자료구조의 구현 및 활용 방법만 알고 있다면 간단하게 해결할 수 있는 문제이다.#include&lt;cstdio&gt;#include&lt;vector&gt;using namespace std;pair&lt;int,int&gt; seg[2000020]...",
    "content": "2357 최댓값과 최솟값 해법            :link:  문제 링크      세그먼트 트리라는 자료구조의 구현 및 활용 방법만 알고 있다면 간단하게 해결할 수 있는 문제이다.#include&lt;cstdio&gt;#include&lt;vector&gt;using namespace std;pair&lt;int,int&gt; seg[2000020];int arr[1000010];void create_seg(int idx,int l,int r){\tif(l==r)\t{\t\tseg[idx] = make_pair(arr[l],arr[l]);\t\treturn;\t}\tint mid = (l+r)/2;\tcreate_seg(2*idx,l,mid);\tcreate_seg(2*idx+1,mid+1,r);\tint min,max;\tif(seg[2*idx].first&lt;seg[2*idx+1].first) min = seg[2*idx].first;\telse min = seg[2*idx+1].first;\tif(seg[2*idx].second&gt;seg[2*idx+1].second) max = seg[2*idx].second;\telse max = seg[2*idx+1].second;\tseg[idx] = make_pair(min,max);}pair&lt;int,int&gt; get_minmax(int idx,int l,int r,int begin,int end){\tif(r&lt;begin || l&gt;end) return make_pair(1000000001,0);\tif(l&gt;=begin &amp;&amp; r&lt;=end) return seg[idx];\telse{\t\tint mid = (l+r)/2;\t\tpair&lt;int,int&gt; tmp1,tmp2;\t\ttmp1 = get_minmax(idx*2,l,mid,begin,end);\t\ttmp2 = get_minmax(idx*2+1,mid+1,r,begin,end);\t\tint min,max;\t\tif(tmp1.first&lt;tmp2.first) min = tmp1.first;\t\telse min = tmp2.first;\t\tif(tmp1.second&gt;tmp2.second) max = tmp1.second;\t\telse max = tmp2.second;\t\treturn make_pair(min,max);\t}}int main(){\tint n,m;\tscanf(\"%d %d\",&amp;n,&amp;m);\tfor(int i=0;i&lt;n;i++)\t{\t\tscanf(\"%d\",&amp;arr[i]);\t}\tcreate_seg(1,0,n-1);\t/*\tfor(int i=0;i&lt;2*n;i++)\t{\t\tprintf(\"%d,%d \",seg[i].first,seg[i].second);\t}\t*/\tfor(int i=0;i&lt;m;i++)\t{\t\tint a,b;\t\tscanf(\"%d %d\",&amp;a,&amp;b);\t\tpair&lt;int,int&gt; result;\t\tresult = get_minmax(1,0,n-1,a-1,b-1);\t\tprintf(\"%d %d\\n\",result.first,result.second);\t}}"
  },
  
  {
    "title": "1019 책 페이지",
    "url": "/posts/1019-%EC%B1%85-%ED%8E%98%EC%9D%B4%EC%A7%80/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, 수학",
    "date": "2024-01-03 14:43:00 +0900",
    





    
    "snippet": "1019 책 페이지 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      특수한 알고리즘이 필요한 문제는 아니고 수학적인 통찰력으로 해결할 수 있는 문제이다. 입력받은 수의 각 자릿수들을 a1a2…ai…an-1an라고 할때 i번째 자리에 특정 숫자가 몇번씩 등장하는지 고민해보면 문제를 해결할 수 있다...",
    "content": "1019 책 페이지 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      특수한 알고리즘이 필요한 문제는 아니고 수학적인 통찰력으로 해결할 수 있는 문제이다. 입력받은 수의 각 자릿수들을 a1a2…ai…an-1an라고 할때 i번째 자리에 특정 숫자가 몇번씩 등장하는지 고민해보면 문제를 해결할 수 있다.숫자 target이 i번째 자리에 몇번 등장하는지 구하는 방법은 아래와 같다.1) ai == target 인 경우  a1a2…ai-1 * 10n-i + ai+1ai+2…an + 12) ai &gt; target 인 경우  a1a2…ai-1 * 10n-i3) ai &lt; target 인 경우  (a1a2…ai-1 + 1) * 10n-i이때 target == 0 인 경우에는 위와는 조금 다르게 구해야 한다. 자세한 내용은 코드 참고.#include&lt;cstdio&gt;using namespace std;int main(){\tlong long n,arr[10]={0,};\tscanf(\"%lld\",&amp;n);\tfor(int i=0;i&lt;10;i++)\t{\t\tlong long bias = 1;\t\twhile(bias&lt;=n)\t\t{\t\t\tlong long l = n/bias/10;\t\t\tlong long target = (n/bias)%10;\t\t\tlong long r = n%bias;\t\t\tif(i==0)\t\t\t{\t\t\t\tif(target == i &amp;&amp; bias != 1)\t\t\t\t{\t\t\t\t\tarr[i] += (l-1) * bias + r + 1;\t\t\t\t}\t\t\t\telse{\t\t\t\t\tarr[i] += l*bias;\t\t\t\t}\t\t\t}\t\t\telse{\t\t\t\tif(target == i)\t\t\t\t{\t\t\t\t\tarr[i] += l * bias + r + 1;\t\t\t\t}\t\t\t\telse if(target &lt; i)\t\t\t\t{\t\t\t\t\tarr[i] += l * bias;\t\t\t\t}\t\t\t\telse{\t\t\t\t\tarr[i] += (l+1) * bias;\t\t\t\t}\t\t\t}\t\t\tbias *= 10; \t\t\t//printf(\"%d\\n\",arr[i]);\t\t}\t\tprintf(\"%lld \",arr[i]);\t}}"
  },
  
  {
    "title": "2079 팰린드롬",
    "url": "/posts/2079-%ED%8C%B0%EB%A6%B0%EB%93%9C%EB%A1%AC/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, 다이나믹 프로그래밍",
    "date": "2024-01-03 14:18:00 +0900",
    





    
    "snippet": "2079 팰린드롬 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      문자열 string이 주어졌을때 해당 문자열의 i번째 인덱스부터 j번째 인덱스까지의 부분문자열이 팰린드롬인지 아닌지를 P(i,j)라고 했을 때 아래의 공식이 성립한다1) string[i] == string[j]인 경우P(i,j) ...",
    "content": "2079 팰린드롬 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      문자열 string이 주어졌을때 해당 문자열의 i번째 인덱스부터 j번째 인덱스까지의 부분문자열이 팰린드롬인지 아닌지를 P(i,j)라고 했을 때 아래의 공식이 성립한다1) string[i] == string[j]인 경우P(i,j) = P(i+1,j-1)2) string[i] != string[j]인 경우P(i,j) = false이를 활용한 동적계획법으로 모든 범위내의 i,j에 대한 P(i,j)를 구할 수 있다. 최소 개수의 팰린드롬으로 나누는 방법은 bfs를 통해서 구하면 된다.#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;int main(){\tchar tmp[2020];\tbool dp[2020][2020] = {0,};\tscanf(\"%s\",tmp);\tstring s=string(tmp);\tvector&lt;vector&lt;int&gt;&gt; g=vector&lt;vector&lt;int&gt;&gt;(s.length()+1,vector&lt;int&gt;());\t//printf(\"%s\",s.c_str());\tfor(int i=0;i&lt;s.length();i++)\t{\t\tdp[i][i] = true;\t\tg[i].push_back(i+1);\t\tfor(int j=1;i-j&gt;=0 &amp;&amp; i+j&lt;s.length();j++)\t\t{\t\t\tif(s[i-j] == s[i+j])\t\t\t{\t\t\t\tdp[i-j][i+j] = true;\t\t\t\tg[i-j].push_back(i+j+1);\t\t\t}\t\t\telse break;\t\t}\t\tif(i+1&lt;s.length() &amp;&amp; s[i]==s[i+1])\t\t{\t\t\tdp[i][i+1] = true;\t\t\tg[i].push_back(i+2);\t\t\tfor(int j=1;i-j&gt;=0 &amp;&amp; i+1+j&lt;s.length();j++)\t\t\t{\t\t\t\tif(s[i-j] == s[i+1+j])\t\t\t\t{\t\t\t\t\tdp[i-j][i+1+j] = true;\t\t\t\t\tg[i-j].push_back(i+j+2);\t\t\t\t}\t\t\t\telse break;\t\t\t}\t\t}\t}\t/*\tfor(int i=0;i&lt;s.length();i++)\t{\t\tfor(int j=0;j&lt;s.length();j++)\t\t{\t\t\tprintf(\"%d \",dp[i][j]);\t\t}\t\tprintf(\"\\n\");\t}\t\tfor(int i=0;i&lt;s.length();i++)\t{\t\tfor(int j=0;j&lt;g[i].size();j++)\t\t{\t\t\tprintf(\"%d \",g[i][j]);\t\t}\t\tprintf(\"\\n\");\t}\t*/\tqueue&lt;int&gt; q;\tbool visited[2020] = {0,};\tint dist[2020] = {0,};\tvisited[0] = true;\tq.push(0);\twhile(!q.empty())\t{\t\tint cur = q.front();\t\tq.pop();\t\tfor(int i=0;i&lt;g[cur].size();i++)\t\t{\t\t\tif(!visited[g[cur][i]])\t\t\t{\t\t\t\tvisited[g[cur][i]] = true;\t\t\t\tdist[g[cur][i]] = dist[cur]+1;\t\t\t\tq.push(g[cur][i]);\t\t\t}\t\t}\t}\tprintf(\"%d\",dist[s.size()]);}"
  },
  
  {
    "title": "20149 선분 교차 3",
    "url": "/posts/20149-%EC%84%A0%EB%B6%84-%EA%B5%90%EC%B0%A8-3/",
    "categories": "ps스터디, boj",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트, CCW, 기하학",
    "date": "2024-01-02 16:24:00 +0900",
    





    
    "snippet": "20149 선분 교차 3 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      풀이 할 때 일반적으로 떠오르는 해법인 평면에서 직선의 방정식을 이용해 각 직선의 기울기 등을 계산하는 방식은 부동소수점 오차로 인해 정확한 풀이가 불가능하다. 따라서 벡터의 외적을 활용하는 ccw 알고리즘을 써야 한다.이...",
    "content": "20149 선분 교차 3 해법백준 온라인 저지 사이트에 올라와있는 문제이다.            :link:  문제 링크      풀이 할 때 일반적으로 떠오르는 해법인 평면에서 직선의 방정식을 이용해 각 직선의 기울기 등을 계산하는 방식은 부동소수점 오차로 인해 정확한 풀이가 불가능하다. 따라서 벡터의 외적을 활용하는 ccw 알고리즘을 써야 한다.이때 두 선분이 서로 일직선상에서 교차하는 경우에 대한 몇가지 예외처리까지 해주면 완전한 풀이가 가능하다.#include&lt;cstdio&gt;#include&lt;cmath&gt;  #include&lt;algorithm&gt;using namespace std;int ccw(long long x1,long long y1,long long x2,long long y2,long long x3,long long y3){\tlong long v_x1 = x2-x1,v_y1 = y2-y1,v_x2 = x3-x2,v_y2 = y3-y2;\tlong long ccw = v_x1*v_y2 - v_x2*v_y1;\tif(ccw&gt;0) return 1;\telse if(ccw==0) return 0;\telse return -1;}int main(){\tlong long x1,x2,x3,x4,y1,y2,y3,y4;\tscanf(\"%lld %lld %lld %lld\\n%lld %lld %lld %lld\",&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;x3,&amp;y3,&amp;x4,&amp;y4);\tint ccw1,ccw2,ccw3,ccw4;\tccw1 = ccw(x1,y1,x2,y2,x3,y3);\tccw2 = ccw(x1,y1,x2,y2,x4,y4);\tccw3 = ccw(x3,y3,x4,y4,x1,y1);\tccw4 = ccw(x3,y3,x4,y4,x2,y2);\tbool result =false;\tif(ccw1 * ccw2 == 0 &amp;&amp; ccw3 * ccw4 == 0)\t{\t\t\tif(x1&gt;x2)\t\t\t{\t\t\t\tswap(x1,x2);\t\t\t\tswap(y1,y2);\t\t\t}\t\t\telse if(x1==x2 &amp;&amp; y1&gt;y2)\t\t\t{\t\t\t\tswap(x1,x2);\t\t\t\tswap(y1,y2);\t\t\t}\t\t\tif(x3&gt;x4)\t\t\t{\t\t\t\tswap(x3,x4);\t\t\t\tswap(y3,y4);\t\t\t}\t\t\telse if(x3==x4 &amp;&amp; y3&gt;y4)\t\t\t{\t\t\t\tswap(x3,x4);\t\t\t\tswap(y3,y4);\t\t\t}\t\t\tif((x2&gt;x3?true:(x2==x3?y2&gt;=y3:false))&amp;&amp;(x1&lt;x4?true:(x1==x4?y1&lt;=y4:false)))\t\t\t{\t\t\t\tprintf(\"1\\n\");\t\t\t\tif(ccw1!=ccw2 &amp;&amp; ccw3!=ccw4)\t\t\t\t{\t\t\t\t\tif(x2==x3 &amp;&amp; y2==y3 || x2==x4 &amp;&amp; y2==y4) printf(\"%lld %lld\",x2,y2);\t\t\t\t\telse printf(\"%lld %lld\",x1,y1);\t\t\t\t}\t\t\t\telse{\t\t\t\t\tif(x2==x3 &amp;&amp; y2==y3) printf(\"%lld %lld\",x2,y2);\t\t\t\t\telse if(x1==x4 &amp;&amp; y1==y4) printf(\"%lld %lld\",x1,y1);\t\t\t\t}\t\t\t\treturn 0;\t\t\t}\t}\telse if(ccw1 * ccw2 &lt;= 0 &amp;&amp; ccw3 * ccw4 &lt;= 0)\t{\t\tprintf(\"1\\n\");\t\tlong double grad1,grad2,c1,c2;\t\tbool is_ver1=false,is_ver2=false;\t\tif(x1-x2==0) is_ver1 =true;\t\telse\t\t{\t\t\tgrad1 = (long double)(y1-y2) / (x1-x2);\t\t}\t\tif(x3-x4==0) is_ver2=true;\t\telse\t\t{\t\t\tgrad2 = (long double)(y3-y4)/(x3-x4);\t\t}\t\tif(is_ver1)\t\t{\t\t\tc2 = y3 - grad2 * x3;\t\t\tlong double y_meet;\t\t\ty_meet = grad2 * x1 + c2;\t\t\tprintf(\"%.16Lf %.16Lf\",(long double)x1,y_meet);\t\t}\t\telse if(is_ver2)\t\t{\t\t\tc1 = y1 - grad1 * x1;\t\t\tlong double y_meet;\t\t\ty_meet = grad1 * x3 + c1;\t\t\tprintf(\"%.16Lf %.16Lf\",(long double)x3,y_meet);\t\t}\t\telse\t\t{\t\t\tc1 = y1 - grad1 * x1;\t\t\tc2 = y3 - grad2 * x3;\t\t\tlong double x_meet,y_meet;\t\t\tx_meet = (c2 - c1) / (grad1 - grad2);\t\t\ty_meet = x_meet * grad1 + c1;\t\t\tprintf(\"%.16Lf %.16Lf\",x_meet,y_meet);\t\t}\t\treturn 0;\t}\tprintf(\"0\");}"
  },
  
  {
    "title": "problem solving 스터디 시작",
    "url": "/posts/problem-solving-%EC%8A%A4%ED%84%B0%EB%94%94-%EC%8B%9C%EC%9E%91/",
    "categories": "ps스터디, 스터디 시작",
    "tags": "Github, Git, 스터디, 알고리즘, 코딩테스트",
    "date": "2024-01-02 15:26:00 +0900",
    





    
    "snippet": "problem solving 스터디 시작각종 코딩 테스트 준비 및 개인 코딩 실력 향상을 위해서 대학교 동기인 Hyuk-San Kwon, slllldka과 함께 스터디 그룹을 만들었습니다. 제가 풀어서 공유하였던 문제나 다른 그룹원이 공유하였던 문제 중에 인상깊은 문제가 있다면 해법을 간단하게 정리하여 ps스터디 카테고리로 포스팅하겠습니다.      ...",
    "content": "problem solving 스터디 시작각종 코딩 테스트 준비 및 개인 코딩 실력 향상을 위해서 대학교 동기인 Hyuk-San Kwon, slllldka과 함께 스터디 그룹을 만들었습니다. 제가 풀어서 공유하였던 문제나 다른 그룹원이 공유하였던 문제 중에 인상깊은 문제가 있다면 해법을 간단하게 정리하여 ps스터디 카테고리로 포스팅하겠습니다.            :link:  스터디 깃허브 저장소 바로가기      "
  },
  
  {
    "title": "블로그 시작",
    "url": "/posts/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%9E%91/",
    "categories": "잡담, 블로그",
    "tags": "블로그, 개발, 기록",
    "date": "2023-12-27 16:00:00 +0900",
    





    
    "snippet": "Rim-SeungJae의 개발 블로그오늘부터 이 블로그에 개발과 관련된 다양한 활동 기록을 남기려고 합니다.Problem solving 관련 공부한 내용, 전에 대학교에서 수강한 강의 관련, 그리고 진행하였던 몇가지 프로젝트 등 다양하게 생각중입니다.또 기회가 된다면 그동안 플레이했던 각종 게임에 대한 간단한 리뷰 게시글도 올릴 것 같습니다.",
    "content": "Rim-SeungJae의 개발 블로그오늘부터 이 블로그에 개발과 관련된 다양한 활동 기록을 남기려고 합니다.Problem solving 관련 공부한 내용, 전에 대학교에서 수강한 강의 관련, 그리고 진행하였던 몇가지 프로젝트 등 다양하게 생각중입니다.또 기회가 된다면 그동안 플레이했던 각종 게임에 대한 간단한 리뷰 게시글도 올릴 것 같습니다."
  }
  
]

